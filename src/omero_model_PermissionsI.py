"""
/*
 *   Generated by blitz/templates/resouces/combined.vm
 *
 *   Copyright 2007 Glencoe Software, Inc. All rights reserved.
 *   Use is subject to license terms supplied in LICENSE.txt
 *
 */
"""
import Ice
import omero_model_Permissions_ice
_omero = Ice.openModule("omero")
_omero_model = Ice.openModule("omero.model")
__name__ = "omero.model"

"""Permissions class which implements Unix-like rw logic for user/group/world.

>>> p = PermissionsI()
object #0 (::omero::model::Permissions)
{
    perm1 = -35
}
"""
class PermissionsI(_omero_model.Permissions):

      class PermissionsI_generator:
          def __iter__(self):
              return self
          def next(self):
              return PermissionsI()

      def generator(cls):
          return cls.PermissionsI_generator()
      generator = classmethod(generator)

      def __init__(self, l = -1):
            super(PermissionsI, self).__init__()
            self.perm1 = l
            self.setGroupWrite(False)
            self.setWorldWrite(False)
            self.setLocked(False)
            pass

      def granted(self, mask, shift):
            return (self.perm1 & (mask<<shift)) == (mask<<shift)

      def set(self, mask, shift, on):
            if on:
                  self.perm1 = (self.perm1 | ( 0L | (mask<<shift)))
            else:
                  self.perm1 = (self.perm1 & (-1L ^ (mask<<shift)))

      # shift 8; mask 4
      def isUserRead(self):
            return self.granted(4,8)
      def setUserRead(self, value):
            self.set(4,8,value)

      # shift 8; mask 2
      def isUserWrite(self):
            return self.granted(2,8)
      def setUserWrite(self, value):
            self.set(2,8,value)

      # shift 4; mask 4
      def isGroupRead(self):
            return self.granted(4,4)
      def setGroupRead(self, value):
            self.set(4,4,value)

      # shift 4; mask 2
      def isGroupWrite(self):
            return self.granted(2,4)
      def setGroupWrite(self, value):
            self.set(2,4,value)

      # shift 0; mask 4
      def isWorldRead(self):
            return self.granted(4,0)
      def setWorldRead(self, value):
            self.set(4,0,value)

      # shift 0; mask 2
      def isWorldWrite(self):
            return self.granted(2,0)
      def setWorldWrite(self, value):
            self.set(2,0,value)

      # bit 18
      def isLocked(self):
            ## Here we use the granted logic but without a shift. The not
            ## is because flags are stored with reverse semantics
            return not self.granted(1,18)
      def setLocked(self, value):
            ## See above
            self.set(1,18,not value)

      # Accessors; do not use

      def getPerm1(self):
          return self.perm1

      def setPerm1(self, _perm1):
          self.perm1 = value
          pass

      def __str__(self):
          vals = []
          vals.append(self.isUserRead() and "r" or "-")
          vals.append(self.isUserWrite() and "w" or "-")
          vals.append(self.isGroupRead() and "r" or "-")
          vals.append(self.isGroupWrite() and "w" or "-")
          vals.append(self.isWorldRead() and "r" or "-")
          vals.append(self.isWorldWrite() and "w" or "-")
          return "".join(vals)

_omero_model.PermissionsI = PermissionsI

def _test():
    import doctest
    doctest.testmod()

if __name__ == "__main__":
    _test()
